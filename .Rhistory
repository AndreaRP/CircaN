root.dir = "/data3/arubio/projects/Andrea_CircaN_rebuttal/"
)
# devtools::install_github("AndreaRP/ArpyLib")
library("ArpyLib")
library("ggplot2")
library("ggforce")
library("cowplot")
library("pheatmap")
library("edgeR")
library("dplyr")
source("./src/utils/Utils.R")
setwd("/data3/arubio/projects/Andrea_CircaN_rebuttal/src/circan_waves/")
sapply(list.files(), source)
setwd("/data3/arubio/projects/Andrea_CircaN_rebuttal/")
library("MetaCycle")
source("./src/dependencies/JTK_CYCLEv3.1.R")
colors <- c("#1B9E77", "#D95F02", "#7570B3")
names(colors) <- c("CircaN", "meta2d", "circan_old")
blank_background <- theme(panel.grid.major = element_blank()
, panel.grid.minor = element_blank()
, panel.background = element_blank())
hmcol <- RColorBrewer::brewer.pal(11,"RdBu")
hmcol <- rev(hmcol) # Invert Red and Blue
###################################
data_file_loc <- "./data/raw/fitzgerald_norm_data.csv"
data_file_name <- tools::file_path_sans_ext(basename(data_file_loc))
meta_file_loc <- "./data/raw/fitzgerald_meta.csv"
out_dir <- "./data/processed/"
###################################
dataset <- read.csv(data_file_loc, row.names = 1, stringsAsFactors = F)
s2c <- read.csv(meta_file_loc, row.names = 1, stringsAsFactors = F)
data <- dataset
annot <- data.frame(Probeset=rownames(data))
timepoints <- length(unique(s2c$time))
nrep <- unique(table(s2c$time))
lag <- unique(diff(as.numeric(unique(s2c$time))))
data <- data[,s2c$sample]
jtkdist(timepoints, nrep) # total time points, # replicates per time point
periods <- ceiling(20/lag):round(28/lag) # number of time points per cycle. (10/6=; 20/6)
# cat(timepoints, nrep, lag, periods)
jtk.init(periods, lag)  # 4 is the number of hours between time points
res <- apply(data,1,function(z) {
jtkx(z)
c(JTK.ADJP,JTK.PERIOD,JTK.LAG,JTK.AMP)
})
res <- as.data.frame(t(res))
bhq <- p.adjust(unlist(res[,1]),"BH")
res <- cbind(bhq,res)
colnames(res) <- c("BH.Q","ADJ.P","PER","LAG","AMP")
results_jtk <- cbind(annot,res,data)
results_jtk <- results_jtk[order(res$ADJ.P,-res$AMP),]
write.csv(results_jtk, "./data/processed/fitzgerald_jtk_results.csv", row.names = F)
data <- read.csv("../Ivan_Neutrophils_circadian_Liver/ANALYSES/NLS/files/normalized_counts.csv"
, row.names = 1, stringsAsFactors = F)
s2c <- read.csv("../Ivan_Neutrophils_circadian_Liver/DOC/s2c.csv", stringsAsFactors = F)
s2c_wt <- data.frame(sample=s2c[which(s2c$group=="WT"),"sample"]
, time=s2c[which(s2c$group=="WT"),"ZT"]
, ind=c(1:nrow(s2c[which(s2c$group=="WT"),]))
, stringsAsFactors = F
)
wt_data <- data[,c("Row.names", s2c_wt$sample)]
# Functions, Constants and graphical variables
knitr::opts_knit$set(root.dir = "/data3/arubio/projects/Andrea_CircaN_rebuttal/")
knitr::opts_chunk$set(
fig.align = "center",
fig.path = "../reports/bio_data/figures/",
fig.pos = "H",
message = FALSE,
warning = FALSE,
dev = c("png", "pdf"),
dpi = 500,
root.dir = "/data3/arubio/projects/Andrea_CircaN_rebuttal/"
)
# devtools::install_github("AndreaRP/ArpyLib")
library("ArpyLib")
library("ggplot2")
library("ggforce")
library("cowplot")
library("pheatmap")
library("edgeR")
library("dplyr")
library("MetaCycle")
library("CircaN")
source("./src/dependencies/JTK_CYCLEv3.1.R")
# source("./src/utils/Utils.R")
# setwd("/data3/arubio/projects/Andrea_CircaN_rebuttal/src/circan_waves/")
# sapply(list.files(), source)
# setwd("/data3/arubio/projects/Andrea_CircaN_rebuttal/")
colors <- c("#1B9E77", "#D95F02", "#7570B3")
names(colors) <- c("CircaN", "meta2d", "circan_old")
blank_background <- theme(panel.grid.major = element_blank()
, panel.grid.minor = element_blank()
, panel.background = element_blank())
hmcol <- RColorBrewer::brewer.pal(11,"RdBu")
hmcol <- rev(hmcol) # Invert Red and Blue
# Functions, Constants and graphical variables
knitr::opts_knit$set(root.dir = "/data3/arubio/projects/Andrea_CircaN_rebuttal/")
knitr::opts_chunk$set(
fig.align = "center",
fig.path = "../reports/bio_data/figures/",
fig.pos = "H",
message = FALSE,
warning = FALSE,
dev = c("png", "pdf"),
dpi = 500,
root.dir = "/data3/arubio/projects/Andrea_CircaN_rebuttal/"
)
# devtools::install_github("AndreaRP/ArpyLib")
library("ArpyLib")
library("ggplot2")
library("ggforce")
library("cowplot")
library("pheatmap")
library("edgeR")
library("dplyr")
library("MetaCycle")
library("CircaN")
source("./src/dependencies/JTK_CYCLEv3.1.R")
# source("./src/utils/Utils.R")
# setwd("/data3/arubio/projects/Andrea_CircaN_rebuttal/src/circan_waves/")
# sapply(list.files(), source)
# setwd("/data3/arubio/projects/Andrea_CircaN_rebuttal/")
colors <- c("#1B9E77", "#D95F02", "#7570B3")
names(colors) <- c("CircaN", "meta2d", "circan_old")
blank_background <- theme(panel.grid.major = element_blank()
, panel.grid.minor = element_blank()
, panel.background = element_blank())
hmcol <- RColorBrewer::brewer.pal(11,"RdBu")
hmcol <- rev(hmcol) # Invert Red and Blue
fitzgerald_data <- read.csv("./data/raw/fitzgerald_data.txt", sep="\t")
fitzgerald_data$id <- gsub("gene:","", fitzgerald_data$id)
rownames(fitzgerald_data) <- fitzgerald_data$id
fitzgerald_samples <- grep("_", colnames(fitzgerald_data), value=T)
fitzgerald_meta <- data.frame(sample=fitzgerald_samples
, time=as.numeric(sapply(regmatches(fitzgerald_samples,regexec("_ZT(.*?)_",fitzgerald_samples)), "[[", 2))
, group=sapply(strsplit(fitzgerald_samples, "_"), "[[", 1)
, ind=c(1:length(fitzgerald_samples))
, stringsAsFactors = F
)
# Filter out not detected features
exprs <- fitzgerald_data[which(rowSums(fitzgerald_data[,fitzgerald_meta$sample])>0), fitzgerald_meta$sample]
# Normalize with voom
y <- DGEList(exprs)
y <- calcNormFactors(y)
design <- model.matrix(~ 0 + group, data = fitzgerald_meta)
v <- voom(y, design)
# Calculate statistics with the targets info. (Replicates, reference, etc)
fit <- lmFit(v, design)
# Create Norm Counts Table
norm_counts <- 2^v$E
fitzgerald_meta_wt <- fitzgerald_meta[which(fitzgerald_meta$group=="WT"), ]
fitzgerald_data_wt <- norm_counts[, c(fitzgerald_meta_wt$sample)]
# write.csv(fitzgerald_data_wt[,fitzgerald_meta_wt$sample], "./data/raw/fitzgerald_norm_data.csv")
# write.csv(fitzgerald_meta_wt, "./data/raw/fitzgerald_meta.csv")
if (!file.exists("./data/processed/bio_data/fitzgerald_circan_results.csv")){
# devtools::install_github("AndreaRP/CircaN")
circan_results <- CircaN::circan(data = fitzgerald_data_wt
, meta = fitzgerald_meta_wt
, mode="port"
, min_per = 20
, max_per = 28
)
# write.csv(circan_results, "./data/processed/bio_data/fitzgerald_circan_results.csv")
}else{
circan_results <- read.csv("./data/processed/bio_data/fitzgerald_circan_results.csv")
}
if (!file.exists("./data/processed/bio_data/fitzgerald_meta2d_ls_results.csv")){
###################################
data_file_loc <- "./data/raw/fitzgerald_norm_data.csv"
data_file_name <- tools::file_path_sans_ext(basename(data_file_loc))
meta_file_loc <- "./data/raw/fitzgerald_meta.csv"
out_dir <- "./data/processed/bio_data/"
###################################
s2c <- read.csv(meta_file_loc, row.names = 1, stringsAsFactors = F)
meta2d(infile=data_file_loc
, outdir = "./"
, filestyle="csv"
, timepoints = as.numeric(s2c$time)
, minper = 20
, maxper = 28
, cycMethod = "LS"
, analysisStrategy = "auto"
, outputFile = TRUE
, outIntegration = "both"
, adjustPhase = "predictedPer"
, combinePvalue = "fisher"
, weightedPerPha = FALSE
, ARSmle = "auto"
, ARSdefaultPer = 24
, outRawData = FALSE
, releaseNote = TRUE
, outSymbol = "")
# Move results
file.remove(paste("./LSresult_",data_file_name,".csv", sep=""))
file.copy(paste("./meta2d_",data_file_name,".csv", sep="")
, "./data/processed/bio_data/fitzgerald_meta2d_ls_data.csv")
file.remove(paste("./meta2d_",data_file_name,".csv", sep=""))
# ls_results <- read.csv("./data/processed/bio_data/fitzgerald_meta2d_ls_results.csv")
}else{
ls_results <- read.csv("./data/processed/bio_data/fitzgerald_meta2d_ls_results.csv")
}
if (!file.exists("./data/fitzgerald_meta2d_integrated_results.csv")){
###################################
data_file_loc <- "./data/raw/fitzgerald_norm_data.csv"
data_file_name <- tools::file_path_sans_ext(basename(data_file_loc))
meta_file_loc <- "./data/raw/fitzgerald_meta.csv"
out_dir <- "./data/processed/bio_data/"
###################################
s2c <- read.csv(meta_file_loc, row.names = 1, stringsAsFactors = F)
meta2d(infile=data_file_loc
, outdir = "./"
, filestyle="csv"
, timepoints = as.numeric(s2c$time)
, minper = 20
, maxper = 28
, cycMethod = c("LS", "JTK")
, analysisStrategy = "auto"
, outputFile = TRUE
, outIntegration = "both"
, adjustPhase = "predictedPer"
, combinePvalue = "fisher"
, weightedPerPha = FALSE
, ARSmle = "auto"
, ARSdefaultPer = 24
, outRawData = FALSE
, releaseNote = TRUE
, outSymbol = "")
# Move results
file.remove(paste("./JTKresult_",data_file_name,".csv", sep=""))
file.remove(paste("./LSresult_",data_file_name,".csv", sep=""))
file.copy(paste("./meta2d_",data_file_name,".csv", sep="")
, "./data/processed/bio_data/fitzgerald_meta2d_integrated_results.csv")
file.remove(paste("./meta2d_",data_file_name,".csv", sep=""))
metacycle_results <- read.csv("./data/processed/bio_data/fitzgerald_meta2d_integrated_results.csv")
}else{
metacycle_results <- read.csv("./data/processed/bio_data/fitzgerald_meta2d_integrated_results.csv")
}
if (!file.exists("./data/processed/bio_data/fitzgerald_meta2d_integrated_results.csv")){
###################################
data_file_loc <- "./data/raw/fitzgerald_norm_data.csv"
data_file_name <- tools::file_path_sans_ext(basename(data_file_loc))
meta_file_loc <- "./data/raw/fitzgerald_meta.csv"
out_dir <- "./data/processed/bio_data/"
###################################
s2c <- read.csv(meta_file_loc, row.names = 1, stringsAsFactors = F)
meta2d(infile=data_file_loc
, outdir = "./"
, filestyle="csv"
, timepoints = as.numeric(s2c$time)
, minper = 20
, maxper = 28
, cycMethod = c("LS", "JTK")
, analysisStrategy = "auto"
, outputFile = TRUE
, outIntegration = "both"
, adjustPhase = "predictedPer"
, combinePvalue = "fisher"
, weightedPerPha = FALSE
, ARSmle = "auto"
, ARSdefaultPer = 24
, outRawData = FALSE
, releaseNote = TRUE
, outSymbol = "")
# Move results
file.remove(paste("./JTKresult_",data_file_name,".csv", sep=""))
file.remove(paste("./LSresult_",data_file_name,".csv", sep=""))
file.copy(paste("./meta2d_",data_file_name,".csv", sep="")
, "./data/processed/bio_data/fitzgerald_meta2d_integrated_results.csv")
file.remove(paste("./meta2d_",data_file_name,".csv", sep=""))
metacycle_results <- read.csv("./data/processed/bio_data/fitzgerald_meta2d_integrated_results.csv")
}else{
metacycle_results <- read.csv("./data/processed/bio_data/fitzgerald_meta2d_integrated_results.csv")
}
if (!file.exists("./data/processed/bio_data/fitzgerald_jtk_results.csv")){
###################################
data_file_loc <- "./data/raw/fitzgerald_norm_data.csv"
data_file_name <- tools::file_path_sans_ext(basename(data_file_loc))
meta_file_loc <- "./data/raw/fitzgerald_meta.csv"
out_dir <- "./data/processed/bio_data/"
###################################
dataset <- read.csv(data_file_loc, row.names = 1, stringsAsFactors = F)
s2c <- read.csv(meta_file_loc, row.names = 1, stringsAsFactors = F)
data <- dataset
annot <- data.frame(Probeset=rownames(data))
timepoints <- length(unique(s2c$time))
nrep <- unique(table(s2c$time))
lag <- unique(diff(as.numeric(unique(s2c$time))))
data <- data[,s2c$sample]
jtkdist(timepoints, nrep) # total time points, # replicates per time point
periods <- ceiling(20/lag):round(28/lag) # number of time points per cycle. (10/6=; 20/6)
# cat(timepoints, nrep, lag, periods)
jtk.init(periods, lag)  # 4 is the number of hours between time points
res <- apply(data,1,function(z) {
jtkx(z)
c(JTK.ADJP,JTK.PERIOD,JTK.LAG,JTK.AMP)
})
res <- as.data.frame(t(res))
bhq <- p.adjust(unlist(res[,1]),"BH")
res <- cbind(bhq,res)
colnames(res) <- c("BH.Q","ADJ.P","PER","LAG","AMP")
results_jtk <- cbind(annot,res,data)
results_jtk <- results_jtk[order(res$ADJ.P,-res$AMP),]
write.csv(results_jtk, "./data/processed/bio_data/fitzgerald_jtk_results.csv", row.names = F)
}else{
results_jtk <- read.csv("./data/processed/bio_data/fitzgerald_jtk_results.csv")
}
algorithms <- c("CircaN", "meta2d_LS", "metacycle", "jtk")
for (a in algorithms){
x = switch(
a
, "CircaN"={
qvalues <- circan_results$BH_combined
}
, "meta2d_LS" ={
qvalues <- ls_results$LS_BH.Q
}
, "metacycle" ={
qvalues <- metacycle_results$meta2d_BH.Q
}
, "jtk" ={
qvalues <- results_jtk$BH.Q
}
)
dat <- as.data.frame(qvalues)
temp <- ggplot(dat, aes(x=qvalues)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.02,colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666") +
xlim(0, 1.02) +
ggtitle(paste(a, sep="_")) +
theme(plot.title = element_text(size = 8, face = "bold")) +
blank_background
assign(paste("hist",a, sep="_"), temp)
temp_1 <- ggplot(dat, aes(x=qvalues)) +
geom_histogram(binwidth=0.02, colour="black", fill="white") +
xlim(0, 1.02) +
ggtitle(paste(a, sep="_")) +
theme(plot.title = element_text(size = 8, face = "bold")) +
blank_background
assign(paste("hist_1",a, sep="_"), temp_1)
}
algorithms <- list(CircaN=as.character(circan_results[which(circan_results$BH_combined<0.05 & circan_results$r>=0.7), "feature"])
, LS=as.character(ls_results[which(ls_results$LS_BH.Q<0.05), "CycID"])
, MetaCycle=as.character(metacycle_results[which(metacycle_results$meta2d_BH.Q<0.05), "CycID"])
, JTK=as.character(results_jtk[which(results_jtk$BH.Q<0.05), "Probeset"])
)
library("UpSetR")
upset(fromList(algorithms)
, order.by = c("degree")
, queries = list(list(query = intersects , params = list("CircaN"), color = "orchid3", active = T)
# , list(query = intersects, params = list("LS"), color = "firebrick3", active = T)
, list(query = intersects, params = list("MetaCycle"), color = "seagreen3", active = T)
, list(query = intersects, params = list("JTK"), color = "dodgerblue", active = T)
)
# , sets = rev(c("CircaN", "LS", "MetaCycle", "JTK"))
, keep.order = T
, nintersects = NA
)
algorithms <- list(CircaN=as.character(circan_results[which(circan_results$BH_combined<0.05 & circan_results$r>=0.7), "feature"])
, LS=as.character(ls_results[which(ls_results$LS_BH.Q<0.05), "CycID"])
, MetaCycle=as.character(metacycle_results[which(metacycle_results$meta2d_BH.Q<0.05), "CycID"])
, JTK=as.character(results_jtk[which(results_jtk$BH.Q<0.05), "Probeset"])
)
library("UpSetR")
upset(fromList(algorithms)
, order.by = c("degree")
, queries = list(list(query = intersects , params = list("CircaN"), color = "orchid3", active = T)
, list(query = intersects, params = list("LS"), color = "firebrick3", active = T)
, list(query = intersects, params = list("MetaCycle"), color = "seagreen3", active = T)
, list(query = intersects, params = list("JTK"), color = "dodgerblue", active = T)
)
# , sets = rev(c("CircaN", "LS", "MetaCycle", "JTK"))
, keep.order = T
, nintersects = NA
)
algorithms <- list(CircaN=as.character(circan_results[which(circan_results$BH_combined<0.05 & circan_results$r>=0.7), "feature"])
, LS=as.character(ls_results[which(ls_results$LS_BH.Q<0.05), "CycID"])
, MetaCycle=as.character(metacycle_results[which(metacycle_results$meta2d_BH.Q<0.05), "CycID"])
, JTK=as.character(results_jtk[which(results_jtk$BH.Q<0.05), "Probeset"])
)
library("UpSetR")
upset(fromList(algorithms)
, order.by = c("degree")
, queries = list(list(query = intersects , params = list("CircaN"), color = "orchid3", active = T)
# , list(query = intersects, params = list("LS"), color = "firebrick3", active = T)
, list(query = intersects, params = list("MetaCycle"), color = "seagreen3", active = T)
, list(query = intersects, params = list("JTK"), color = "dodgerblue", active = T)
)
# , sets = rev(c("CircaN", "LS", "MetaCycle", "JTK"))
, keep.order = T
, nintersects = NA
)
dim(circan_results[which(circan_results$BH_combined<0.05 & circan_results$r>=0.7), "feature"])
dim(circan_results[which(circan_results$BH_combined<0.05 & circan_results$r>=0.7), ])
algorithms_i <- venn::venn(x=algorithms
, ilab=TRUE
, zcolor = "style"
, intersections=T
, show.plot=F)
intersections <- attr(algorithms_i,"intersections")
fitzgerald_data_wt_circan <- fitzgerald_data_wt[intersections$CircaN, fitzgerald_meta_wt$sample]
algorithms <- list(CircaN=as.character(circan_results[which(circan_results$BH_combined<0.05 & circan_results$r>=0.7), "feature"])
, LS=as.character(ls_results[which(ls_results$LS_BH.Q<0.05), "CycID"])
, MetaCycle=as.character(metacycle_results[which(metacycle_results$meta2d_BH.Q<0.05), "CycID"])
, JTK=as.character(results_jtk[which(results_jtk$BH.Q<0.05), "Probeset"])
)
upset(fromList(algorithms)
, order.by = c("degree")
, queries = list(list(query = intersects , params = list("CircaN"), color = "orchid3", active = T)
# , list(query = intersects, params = list("LS"), color = "firebrick3", active = T)
, list(query = intersects, params = list("MetaCycle"), color = "seagreen3", active = T)
, list(query = intersects, params = list("JTK"), color = "dodgerblue", active = T)
)
# , sets = rev(c("CircaN", "LS", "MetaCycle", "JTK"))
, keep.order = T
, nintersects = NA
)
circan_results[which(circan_results$BH_combined<0.05 & circan_results$r>=0.7), ]
dim(circan_results[which(circan_results$BH_combined<0.05 & circan_results$r>=0.7), ])
as.character(circan_results[which(circan_results$BH_combined<0.05 & circan_results$r>=0.7), "feature"])
head(circan_results[which(circan_results$BH_combined<0.05 & circan_results$r>=0.7), ])
head(fitzgerald_data_wt)
# devtools::install_github("AndreaRP/CircaN")
circan_results <- CircaN::circan(data = fitzgerald_data_wt
, meta = fitzgerald_meta_wt
, mode="port"
, min_per = 20
, max_per = 28
)
head(circan_results)
# Test data
circan_sine <- new_circan(data=fitzgerald_data_wt, s2c=fitzgerald_meta_wt, mode="port", min_per = 20, max_per = 28)
# Test data
circan_sine <- CircaN::circan_sine(data=fitzgerald_data_wt, s2c=fitzgerald_meta_wt, mode="port", min_per = 20, max_per = 28)
head(circan_sine)
circan_triangular <- CircaN::circan_triangular(data=adult, s2c=s2c_adult, mode="port", min_per = 20, max_per = 28)
circan_triangular <- CircaN::circan_triangular(data=fitzgerald_data_wt, s2c=fitzgerald_meta_wt, mode="port", min_per = 20, max_per = 28)
head(circan_triangular)
head(fitzgerald_data_wt)
```{r}
fitzgerald_data <- read.csv("./data/raw/fitzgerald_data.txt", sep="\t")
fitzgerald_data$id <- gsub("gene:","", fitzgerald_data$id)
rownames(fitzgerald_data) <- fitzgerald_data$id
fitzgerald_samples <- grep("_", colnames(fitzgerald_data), value=T)
fitzgerald_meta <- data.frame(sample=fitzgerald_samples
, time=as.numeric(sapply(regmatches(fitzgerald_samples,regexec("_ZT(.*?)_",fitzgerald_samples)), "[[", 2))
, group=sapply(strsplit(fitzgerald_samples, "_"), "[[", 1)
, ind=c(1:length(fitzgerald_samples))
, stringsAsFactors = F
)
# Filter out not detected features
exprs <- fitzgerald_data[which(rowSums(fitzgerald_data[,fitzgerald_meta$sample])>0), fitzgerald_meta$sample]
# Normalize with voom
y <- DGEList(exprs)
y <- calcNormFactors(y)
design <- model.matrix(~ 0 + group, data = fitzgerald_meta)
v <- voom(y, design)
# Calculate statistics with the targets info. (Replicates, reference, etc)
fit <- lmFit(v, design)
# Calculate statistics with the targets info. (Replicates, reference, etc)
fit <- lmFit(v, design)
# Create Norm Counts Table
norm_counts <- 2^v$E
fitzgerald_meta_wt <- fitzgerald_meta[which(fitzgerald_meta$group=="WT"), ]
fitzgerald_data_wt <- norm_counts[, c(fitzgerald_meta_wt$sample)]
head(fitzgerald_data_wt)
fitzgerald_data_wt$features <- rownames(fitzgerald_data_wt)
head(fitzgerald_data_wt)
fitzgerald_data <- read.csv("./data/raw/fitzgerald_data.txt", sep="\t")
fitzgerald_data$id <- gsub("gene:","", fitzgerald_data$id)
rownames(fitzgerald_data) <- fitzgerald_data$id
fitzgerald_samples <- grep("_", colnames(fitzgerald_data), value=T)
fitzgerald_meta <- data.frame(sample=fitzgerald_samples
, time=as.numeric(sapply(regmatches(fitzgerald_samples,regexec("_ZT(.*?)_",fitzgerald_samples)), "[[", 2))
, group=sapply(strsplit(fitzgerald_samples, "_"), "[[", 1)
, ind=c(1:length(fitzgerald_samples))
, stringsAsFactors = F
)
# Filter out not detected features
exprs <- fitzgerald_data[which(rowSums(fitzgerald_data[,fitzgerald_meta$sample])>0), fitzgerald_meta$sample]
# Normalize with voom
y <- DGEList(exprs)
y <- calcNormFactors(y)
design <- model.matrix(~ 0 + group, data = fitzgerald_meta)
v <- voom(y, design)
# Calculate statistics with the targets info. (Replicates, reference, etc)
fit <- lmFit(v, design)
# Create Norm Counts Table
norm_counts <- 2^v$E
fitzgerald_meta_wt <- fitzgerald_meta[which(fitzgerald_meta$group=="WT"), ]
fitzgerald_data_wt <- norm_counts[, c(fitzgerald_meta_wt$sample)]
head(fitzgerald_data_wt)
class(fitzgerald_data_wt)
data <- as.data.frame(fitzgerald_data_wt)
head(data)
data$features <- rownames(data)
data %>% dplyr::select("features", everything())
head(data %>% dplyr::select("features", everything()))
data <- data %>% dplyr::select("features", everything())
f_data <- as.data.frame(fitzgerald_data_wt)
f_data$features <- rownames(f_data)
f_data <- f_data %>% dplyr::select("features", everything())
head(f_data)
# devtools::install_github("AndreaRP/CircaN")
circan_results <- CircaN::circan(data = f_data
, meta = fitzgerald_meta_wt
, mode="port"
, min_per = 20
, max_per = 28
)
write.csv(circan_results, "./data/processed/bio_data/fitzgerald_circan_results.csv")
head(circan_results)
